I"
<h1 id="计算机是怎样跑起来的">《计算机是怎样跑起来的》</h1>

<ol>
  <li>
    <p>PIO：parallel I/O中的寄存器：赋予 $B/\overline{A}$ 引脚1则表示选中B端口，反之则表示选中A端口；$C/\overline{D}$​ 引脚C表示Control控制模式，D表示Data数据模式。</p>
  </li>
  <li>
    <p>CPU的A0和A1引脚与内存和PIO均有连接，为了区分访问的对象，需要CPU上MREQ引脚和IORQ引脚，为0时表示有数据输入输出，反之没有。</p>
  </li>
  <li>
    <p>上拉（Pull-up），指的就是像这样通过加入电阻把元件的引脚和 +5V 连接起来。</p>
  </li>
  <li>
    <p>ARP，地址解析协议：实现由IP到MAC的转换</p>
  </li>
  <li>
    <p>对称密钥加密技术和公开密钥加密技术（阮一峰博客）</p>

    <ol>
      <li>
        <p>欧拉函数 $\varphi(n)$ 表示在小于等于 $n$​ 的正整数之中，与之互质的数字个数。其中 $\varphi(ab)=\varphi(a)\varphi(b)$</p>
      </li>
      <li>
        <p>欧拉定理：若a和n互质，则 $a^{\varphi(n)}\equiv 1(\mod n)$​​ ​，费马小定理是其特例。</p>
      </li>
      <li>
        <p>模反元素：a和n互质，则一定有b使得 $ab\equiv1(\mod n)$​​​，b是a的模反元素。</p>
      </li>
      <li>
        <pre><code class="language-mermaid">graph TB
	subgraph 公钥
		n拷贝一 &amp; e
	end
	subgraph 私钥
		n拷贝二 &amp; d
	end
	subgraph 运算区
		质数p &amp; 质数q--&gt;A(n=p*q)
		A--&gt;n
		质数p &amp; 质数q--&gt;B(φ_n=p-1*q-1)
		B--&gt;φ_n
		φ_n--&gt;C(随机e与之互质)
		C--&gt;e
		e &amp; φ_n--&gt;D(ed模φ_n余1)
		D--&gt;d
		n--&gt;n拷贝一 &amp; n拷贝二
	end
</code></pre>
      </li>
    </ol>
  </li>
  <li>
    <p>xmlns=”命名空间的名字”作为标签的一个属性记述，可以为标签设定命名空间。</p>
  </li>
</ol>

<h1 id="程序是怎样跑起来的">《程序是怎样跑起来的》</h1>

<ol>
  <li>
    <p>浮点数是指用符号、尾数、基数和指数这四部分来表示的小数 $\pm(符号) m(尾数)\cross n(基数)^{e(指数)}$，计算机内部基数为2，无论单、双精度，32/64位中均只有1位表示符号。</p>
  </li>
  <li>
    <p>正则表达式：十进制数确保小数点前为0，小数点后第一位非0；二进制数确保小数点前首位1，再前均为0，因第一位必零，故只需存储小数点后部分。</p>
  </li>
  <li>
    <p>EXCESS系统：注意这里指数部分正负的表示方法不同于整数，无符号位，而是将范围中位数设为0</p>
  </li>
  <li>
    <pre><code class="language-mermaid">graph LR
内存IC分类--&gt;ROM/Read_Only_Memory &amp; RAM/Random_Access_Memory
RAM/Random_Access_Memory--&gt;DRAM/Dynamic_RAM &amp; SRAM/Static_RAM
</code></pre>
  </li>
  <li>
    <p>内存IC引脚</p>

    <ul>
      <li>VCC、GND：电源</li>
      <li>A0~A9：地址信号，用于指定数据的存储场所</li>
      <li>D0~D7：数据信号，一次吞吐的数据量</li>
      <li>RD、WR：控制信号</li>
    </ul>
  </li>
  <li>
    <p>虚拟内存（Page In与Page Out）与磁盘缓存</p>
  </li>
  <li>
    <p>节约内存：DLL文件实现函数共有，动态链接加载（Dynamic Link Library）</p>
  </li>
  <li>
    <p>压缩数据：RLE（重复部分用数字表示），哈夫曼算法LHA（参考莫斯编码，哈夫曼树实现，高频者短编码）</p>
  </li>
  <li>
    <p>汇编语言源代码与本地代码一一对应</p>
  </li>
  <li>
    <p>在多线程处理中，用汇编语言记述的代码每运行 1 行，处理都有可能切换到其他线程（函数）中。（可能会有数据混乱或错误）</p>
  </li>
  <li>
    <p>要将一些位设定为ON只需把目标位定为1其他位0后与原数做OR运算即可（得到其他位不变，目标位全1）；要将一些位设定为OFF只需把目标位定为0其他位1后与原数做AND运算即可（得到其他位不变，目标位全0）</p>
  </li>
  <li>DMA （Direct Memory Access）是指在不通过 CPU 的情况下，外围设备直接和主内存进行数据传送。</li>
</ol>

<h1 id="深入理解计算机系统">《深入理解计算机系统》</h1>

<ol>
  <li>
    <p>正数补码即原码，负数补码=反码+1</p>
  </li>
  <li>
    <p>负数取反：相反数=反码+1            -(-5)补码=(-5)补码的反码+1</p>
  </li>
  <li>
    <p>负数就是求正数的相反数，减法就是求减数的相反数再相加。NEG指令</p>
  </li>
</ol>

<p>浮点数编码  为什么会有相同部分</p>

<p>布尔代数</p>
:ET