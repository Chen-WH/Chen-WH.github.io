I"n<h1 id="虚拟化技术">虚拟化技术</h1>

<h2 id="cpu运行级别">CPU运行级别</h2>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Priv_rings.svg/1200px-Priv_rings.svg.png" alt="Protection ring - Wikipedia" /></p>

<p>Intel的CPU将特权级别分为4个级别：RING0,RING1,RING2,RING3。Windows只使用其中的两个级别RING0和RING3，RING0只给操作系统用，RING3任何程序都能用。应用程序运行在RING3上，不能做受控操作。如果要做，比如要访问磁盘，写文件，那就要通过执行系统调用（函数），执行系统调用的时候，CPU的运行级别会发生从ring3到ring0的切换，并跳转到系统调用对应的内核代码位置执行，这样内核就为你完成了设备访问，完成之后再从ring0返回ring3。这个过程也称作用户态和内核态的切换。</p>

<p>RING设计的初衷是将系统权限与程序分离出来，使之能够让OS更好的管理当前系统资源，也使得系统更加稳定。举个RING权限的最简单的例子：一个停止响应的应用程式，它运行在比RING0更低的指令环上，你不必大费周章的想着如何使系统回复运作，这期间，只需要启动任务管理器便能轻松终止它，因为它运行在比程式更低的RING0指令环中，拥有更高的权限，可以直接影响到RING0以上运行的程序，当然有利就有弊，RING保证了系统稳定运行的同时，也产生了一些十分麻烦的问题。比如一些OS虚拟化技术，在处理RING指令环时便遇到了麻烦，系统是运行在RING0指令环上的，但是虚拟的OS毕竟也是一个系统，也需要与系统相匹配的权限。而RING0不允许出现多个OS同时运行在上面，最早的解决办法便是使用虚拟机，把OS当成一个程序来运行。</p>

<h2 id="虚拟机中快照与克隆的区别">虚拟机中快照与克隆的区别</h2>

<ul>
  <li>一个虚拟机的克隆就是原始虚拟机全部数据的一个拷贝，克隆的操作一但完成，克隆的虚拟机就可以脱离原始虚拟机独立存在，而且克隆的虚拟机和原始虚拟机完全独立，不共享任何资源。</li>
  <li>虚拟机的快照指对某一个特定文件系统在某一个特定时间内的一个具有只读属性的镜像。快照时复制一份原磁盘的索引，指向的实际数据均为原始磁盘的数据，只有当原镜像的的数据发生变化时，才将变化区域的在变化之前的数据复制一份给快照对应位置。</li>
  <li>快照和克隆都是某一时间点的镜像，区别在于快照只能读，而克隆可以写。快照仅能用于同一虚拟机不同时间点之间跳转，因为它保存的是原始磁盘数据的索引，有些类似git的commit操作；而虚拟机克隆储存了所有数据，可以进行新的部署。</li>
</ul>

<h2 id="关于裸金属">关于裸金属</h2>

<p><img src="https://raw.githubusercontent.com/Chen-WH/PicGo/main/Typora/202111041855822.png" alt="image-20211029134118126" /></p>

<p>根据 wiki 的解释，裸金属是指可以不经过操作系统干预的情况下，直接在逻辑硬件上执行指令。Bare，正是强调了直面硬件，中间并无遮拦。</p>

<ul>
  <li>安全方面：裸金属服务器具有安全物理隔离的特性，裸金属服务器与其他租户物理隔离。</li>
  <li>性能方面：裸金属资源完全独占，完全没有性能损耗，能够胜任高 IO 应用、高性能计算等业务，例如海量数据采集和挖掘，高性能数据库，大型在线游戏等。</li>
  <li>弹性和自动化：除了裸金属的固有特性，裸金属云完全继承了虚拟化云服务器的 <strong>云</strong> 特性，例如，快速交付，弹性伸缩等，并且整个过程都是自动化管理。唯一的差距在于相对于虚机和容器的秒级响应，裸金属是分钟级别的响应。</li>
</ul>

<h2 id="全虚拟化半虚拟化硬件辅助虚拟化三者之间的区别">全虚拟化、半虚拟化、硬件辅助虚拟化三者之间的区别。</h2>

<ul>
  <li>
    <p>全虚拟化：客户操作系统运行在 Ring 1，在执行特权指令时，会触发异常，然后 VMM 捕获这个异常，在异常里面做翻译，模拟，最后返回到客户操作系统内，客户操作系统认为自己的特权指令工作正常，继续运行。</p>
  </li>
  <li>
    <p>半虚拟化：修改操作系统内核，替换掉不能虚拟化的指令，通过超级调用（hypercall）直接和底层的虚拟化层hypervisor来通讯，hypervisor 同时也提供了超级调用接口来满足其他关键内核操作，比如内存管理、中断和时间保持。</p>
  </li>
  <li>
    <p>硬件辅助虚拟化：硬件层面直接分配给虚拟机物理设备，这样全虚拟化下，那些靠“捕获异常-翻译-模拟”的实现就不需要了。Intel和AMD的CPU都提供了能使hypervisor存取Ring 0硬件的x86虚拟化指令集。Intel VT-x 和AMD-V都创建了一个新的“Ring -1”，这样客户操作系统就可以本机运行 Ring 0 操作而不影响其他来宾或主机操作系统。为了辅助虚拟化，VT-x 和 SVM 在 Ring 0 下插入了一个新的特权级别。两者都添加了九个新的机器代码指令，这些指令仅适用于“Ring -1”，旨在供虚拟机管理程序使用。</p>
  </li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">全虚拟化</th>
      <th style="text-align: center">半虚拟化</th>
      <th style="text-align: center">硬件辅助虚拟化</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">兼容性</td>
      <td style="text-align: center">无需修改客户操作系统，最佳兼容性</td>
      <td style="text-align: center">客户操作系统需要修改来支持hypercall，兼容性差，不支持Windows</td>
      <td style="text-align: center">无需修改客户操作系统，最佳兼容性</td>
    </tr>
    <tr>
      <td style="text-align: center">性能</td>
      <td style="text-align: center">差，因为需要经过异常处理过程</td>
      <td style="text-align: center">好，虚拟机的性能接近于物理机。</td>
      <td style="text-align: center">CPU需要在两种模式之间切换，带来性能开销；但其性能在逐渐逼近半虚拟化。</td>
    </tr>
  </tbody>
</table>

<h2 id="reference">Reference</h2>

<ol>
  <li>
    <table>
      <tbody>
        <tr>
          <td>[分级保护域</td>
          <td>维基百科](https://zh.wikipedia.org/wiki/%E5%88%86%E7%BA%A7%E4%BF%9D%E6%8A%A4%E5%9F%9F)</td>
        </tr>
      </tbody>
    </table>
  </li>
</ol>
:ET